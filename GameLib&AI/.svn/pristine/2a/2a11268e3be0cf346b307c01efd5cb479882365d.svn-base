#include <testing.h>
#include <iostream>
void Testing::init() {
	myCam.setPos(glm::vec3(-1.40f, 0.82f, -0.45f),glm::vec3(0.41f, -0.29f, -0.01f));

	//place shaders to folder "shaders" in solution directory
	auto meShader = addShader("../shaders/vert.glsl","../shaders/frag.glsl");
	saveViewTransform(meShader,"viewTransform");





	// initUVData because sphere's don't have it
	auto tempGeo = addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makePlane(3)),GL_TRIANGLES);
	auto tempGeo2= addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makeSphere(10)),GL_TRIANGLES);

	// format for textures with folder in solution directory
	myTexture = addTexture("./../typhlosion.png");
	myTexture2 = addTexture("./../fire.png");


	// when using a NU shape there is no need to define layouts
	meRenderable = addRenderable(tempGeo,meShader,myTexture);
	meRenderable2 = addRenderable(tempGeo2,meShader,myTexture2);
	//auto tempGeo2 = addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makeSphere(10)),GL_TRIANGLES);
	//myTexture = addTexture("./../fire.png");
	//meRenderable = addRenderable(tempGeo2,meShader,myTexture);

	meRenderable->saveWhereMat("model2WorldTransform"); // really  just a call to addUniformPram
	meRenderable->saveTexture("myTexture");
	meRenderable2->saveWhereMat("model2WorldTransform");
	meRenderable2->saveTexture("myTexture");
	//rotationSpeed = Random::glmRand::randomFloatVectorInBoxRanged(0.0f,145.0f,180.0f);
	
	//rotation += rotationSpeed;
}
void Testing::nextFrame(float dt) {
	//bad hack to update color and rotation every 2 seconds
	/*static float currentTime = 0;
	currentTime += dt;
	if(currentTime > 2) {
		currentTime = 0;
		blendColor = Random::glmRand::randomFloatVectorInBox(1,1,1);
		const int rotSpeedRange = 100;
		rotationSpeed = Random::glmRand::randomFloatVectorInBoxRanged(rotSpeedRange,rotSpeedRange,rotSpeedRange);
	}*/
	static float currentTime = 0;
	currentTime += dt;
	if(currentTime > 2)
	{
	currentTime=0;
	const int rotSpeedRange = 10;
	rotationSpeed = Random::glmRand::randomFloatVectorInBoxRanged(rotSpeedRange,rotSpeedRange,rotSpeedRange);
	}
	rotation2 += rotationSpeed * dt;
	//just edit the where matrix for renderables
	
	meRenderable->whereMat = glm::rotate(rotation.x,glm::vec3(1,0,0))
		*= glm::rotate(rotation.y,glm::vec3(0,1,0))
		*= glm::rotate(rotation.z,glm::vec3(0,0,1));
	meRenderable2->whereMat = glm::rotate(rotation2.x,glm::vec3(1,0,0))
		*= glm::rotate(rotation2.y,glm::vec3(0,1,0))
		*= glm::rotate(rotation2.z,glm::vec3(0,0,1));
}