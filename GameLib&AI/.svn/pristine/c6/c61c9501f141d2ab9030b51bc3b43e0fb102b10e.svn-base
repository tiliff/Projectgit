#include <GL\glew.h>
#include <QtGui\qmouseevent>
#include "GlWindow.h"
#include "Qt\qdebug.h"
#include "glm\glm.hpp"
#include <glm\gtc/matrix_transform.hpp>
#include "glm\gtx\transform.hpp"
#include <ShapeGenerator.h>
using glm::vec3;
using glm::vec2;
GLuint programID;
GLuint cubeNumIndices;
GLuint torNumIndices;
GLuint sphereNumIndices;
GLuint arrowNumIndices;
GLuint teapotNumIndices;
GLuint theVertexBufferID;
GLuint theIndexBufferID;
GLuint cubeVertexArrayObjectID;
GLuint torusVertexArrayObjectID;
GLuint sphereVertexArrayObjectID;
GLuint arrowVertexArrayObjectID;
GLuint teapotVertexArrayObjectID;
GLuint torusIndexDataByteOffset;
GLuint sphereIndexDataByteOffset;
GLuint arrowIndexDataByteOffset;
GLuint teapotIndexDataByteOffset;
#include "Camera.h"
Camera cam;
float angle=0.0f;
float angley=0.0f;
char* vertexShaderCode =
	"#version 400\r\n"
	""
	"in layout(location=0) vec3 position;"
	"in layout(location=1) vec3 color;"
	""
	""
	""
	""
	"out vec3 decolor;"
	"uniform mat4 transform;"
	"uniform mat4 projectionMat;"
	"uniform vec3 dominatingColor;"
	""
	"void main()"
	"{"
	" vec4 v= vec4(position,1);"
	"vec4 newPosition = transform * v;"
	"vec4 projectedPosition= projectionMat * newPosition;"
	"gl_Position = projectedPosition;"
	" decolor=color;"
	"}";
char* fragmentShaderCode =
	"#version 400\r\n"
	""
	"in vec3 decolor;"
	"out vec3 finalColor;"
	""
	""
	"void main()"
	"{"
	" finalColor = decolor;"
	"}";

void GlWindow::initializeGL()
{
	setMouseTracking(true);
	glewInit();
	glEnable(GL_DEPTH_TEST);
	sendDataToHardware();
	compileShaders();
	connect(&mytimer,SIGNAL(timeout()),this,SLOT(myUpdate()));
	mytimer.start(0);
}
void GlWindow::myUpdate()
{
	QCursor mouse = cursor();
	QPoint mousePosition = mouse.pos();
	cam.mouseUpdate(glm::vec2(mousePosition.x(),mousePosition.y()));
	
		angley +=5.0f;
	
		angle -= 5.0f;
	
	if(GetAsyncKeyState('W'))
	{
		cam.moveForward();
	}
	if(GetAsyncKeyState('S'))
	{
		cam.moveBackward();
	}
	if(GetAsyncKeyState('A'))
	{
		cam.strafeLeft();
	}
	if(GetAsyncKeyState('D'))
	{
		cam.strafeRight();
	}
	if(GetAsyncKeyState('R'))
	{
		cam.moveUp();
	}
	if(GetAsyncKeyState('F'))
	{
		cam.moveDown();
	}

	paintGL();
	swapBuffers();
}
void GlWindow::sendDataToHardware()
{
    Neumont::ShapeData cube= Neumont::ShapeGenerator::makeCube();
	Neumont::ShapeData torus=Neumont::ShapeGenerator::makeTorus(10);
	Neumont::ShapeData sphere=Neumont::ShapeGenerator::makeSphere(10);
	Neumont::ShapeData arrow=Neumont::ShapeGenerator::makeArrow();
	//Neumont::ShapeData teapot=Neumont::ShapeGenerator::makeTeapot(10,glm::mat4());

    glGenBuffers(1,&theVertexBufferID);
	glBindBuffer(GL_ARRAY_BUFFER,theVertexBufferID);
	glBufferData(GL_ARRAY_BUFFER,cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize()+arrow.vertexBufferSize()/*+teapot.vertexBufferSize()*/, 0, GL_STATIC_DRAW);
	glBufferSubData(GL_ARRAY_BUFFER,0,cube.vertexBufferSize(),cube.verts);
	glBufferSubData(GL_ARRAY_BUFFER,cube.vertexBufferSize(),torus.vertexBufferSize(),torus.verts);
	glBufferSubData(GL_ARRAY_BUFFER,cube.vertexBufferSize()+torus.vertexBufferSize(),sphere.vertexBufferSize(),sphere.verts);
	glBufferSubData(GL_ARRAY_BUFFER,cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize(),arrow.vertexBufferSize(),arrow.verts);
	//glBufferSubData(GL_ARRAY_BUFFER,cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize()+arrow.vertexBufferSize(),teapot.vertexBufferSize(),teapot.verts);
	
	
	glGenBuffers(1,&theIndexBufferID);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,theIndexBufferID);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, cube.indexBufferSize()+torus.indexBufferSize()+sphere.indexBufferSize()+arrow.indexBufferSize()/*+teapot.indexBufferSize()*/,0,GL_STATIC_DRAW);
	glBufferSubData(GL_ELEMENT_ARRAY_BUFFER,0,cube.indexBufferSize(),cube.indices);
	glBufferSubData(GL_ELEMENT_ARRAY_BUFFER,cube.indexBufferSize(),torus.indexBufferSize(),torus.indices);
	glBufferSubData(GL_ELEMENT_ARRAY_BUFFER,cube.indexBufferSize()+torus.indexBufferSize(),sphere.indexBufferSize(),sphere.indices);
	glBufferSubData(GL_ELEMENT_ARRAY_BUFFER,cube.indexBufferSize()+torus.indexBufferSize()+sphere.indexBufferSize(),arrow.indexBufferSize(),arrow.indices);
	//glBufferSubData(GL_ELEMENT_ARRAY_BUFFER,cube.indexBufferSize()+torus.indexBufferSize()+sphere.indexBufferSize()+arrow.indexBufferSize(),teapot.indexBufferSize(),teapot.indices);
	
	cubeNumIndices=cube.numIndices;
	torNumIndices=torus.numIndices;
	sphereNumIndices=sphere.numIndices;
	arrowNumIndices=arrow.numIndices;
	//teapotNumIndices=teapot.numIndices;

	glGenVertexArrays(1,&cubeVertexArrayObjectID);
	glGenVertexArrays(1, &torusVertexArrayObjectID);
	glGenVertexArrays(1,&sphereVertexArrayObjectID);
	glGenVertexArrays(1, &arrowVertexArrayObjectID);
	//glGenVertexArrays(1,&teapotVertexArrayObjectID);

	glBindVertexArray(cubeVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,theVertexBufferID);
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),0);
	glVertexAttribPointer(1,4,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(3*sizeof(float)));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,theIndexBufferID);

	glBindVertexArray(torusVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,theVertexBufferID);
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),(void*)cube.vertexBufferSize());
	glVertexAttribPointer(1,4,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+(3*sizeof(float))));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,theIndexBufferID);

	glBindVertexArray(sphereVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,theVertexBufferID);
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+torus.vertexBufferSize()));
	glVertexAttribPointer(1,4,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+torus.vertexBufferSize()+(3*sizeof(float))));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,theIndexBufferID);

	glBindVertexArray(arrowVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,theVertexBufferID);
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize()));
	glVertexAttribPointer(1,4,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize()+(3*sizeof(float))));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,theIndexBufferID);

	/*glBindVertexArray(teapotVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,theVertexBufferID);
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize()+arrow.vertexBufferSize()));
	glVertexAttribPointer(1,4,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(cube.vertexBufferSize()+torus.vertexBufferSize()+sphere.vertexBufferSize()+arrow.vertexBufferSize()+(3*sizeof(float))));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,theIndexBufferID);*/

	torusIndexDataByteOffset=cube.indexBufferSize();
	sphereIndexDataByteOffset=torusIndexDataByteOffset+torus.indexBufferSize();
	arrowIndexDataByteOffset=sphereIndexDataByteOffset+sphere.indexBufferSize();
	//teapotIndexDataByteOffset=arrowIndexDataByteOffset+arrow.indexBufferSize();
}
void GlWindow::compileShaders()
{
	GLuint vertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	GLuint fragShaderID=glCreateShader(GL_FRAGMENT_SHADER);

	const char* adapter[1];
	adapter[0] = vertexShaderCode;
	glShaderSource(vertexShaderID,1,adapter,0);
	adapter[0] = fragmentShaderCode;
	glShaderSource(fragShaderID,1,adapter,0);

	glCompileShader(vertexShaderID);
	glCompileShader(fragShaderID);

	GLint compileStatus;
	glGetShaderiv(vertexShaderID,GL_COMPILE_STATUS,&compileStatus);
	if(compileStatus != GL_TRUE)
	{
		GLint logLength;
		glGetShaderiv(vertexShaderID,GL_INFO_LOG_LENGTH, &logLength);
		char* buffer = new char [logLength];
		GLsizei bitBucket;
		glGetShaderInfoLog(vertexShaderID,logLength,&bitBucket,buffer);
		qDebug() <<buffer;
		delete [] buffer;
	}

	programID = glCreateProgram();
	glAttachShader(programID,vertexShaderID);
	glAttachShader(programID,fragShaderID);

	glLinkProgram(programID);

	glUseProgram(programID);

}
void GlWindow::paintGL()
{
	glViewport(0,0,width(),height());
	glClear(GL_DEPTH_BUFFER_BIT);
	glClear(GL_COLOR_BUFFER_BIT);

	glm::mat4 transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(0.0f,0.0f,1.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glm::mat4 projectionmatrix = glm::perspective(90.0f,((float)width()) / height(),0.1f,10.0f);
	vec3 dominatingColor(0.6f,0.6f,0.2f);
	dominatingColor=vec3(dominatingColor.r,dominatingColor.g,dominatingColor.b);
	GLint dominatingColorUniformLocation = glGetUniformLocation(programID,"dominatingColor");
	GLint translateUniformLocation = glGetUniformLocation(programID,"transform");
	GLint projectionUniformLocation = glGetUniformLocation(programID,"projectionMat");
	


	glBindVertexArray(torusVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(0.0f,-1.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,torNumIndices,GL_UNSIGNED_SHORT,(void*)torusIndexDataByteOffset);

	glBindVertexArray(torusVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(2.0f,-1.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,torNumIndices,GL_UNSIGNED_SHORT,(void*)torusIndexDataByteOffset);

	glBindVertexArray(torusVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(-2.0f,-1.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,torNumIndices,GL_UNSIGNED_SHORT,(void*)torusIndexDataByteOffset);

	glBindVertexArray(cubeVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(-2.0f,2.0f,1.0f))*glm::rotate(angley,vec3(1.0f,0.0f,-1.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,cubeNumIndices,GL_UNSIGNED_SHORT, 0);

	glBindVertexArray(cubeVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(0.0f,2.0f,1.0f))*glm::rotate(angley,vec3(1.0f,0.0f,-1.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,cubeNumIndices,GL_UNSIGNED_SHORT, 0);

	glBindVertexArray(cubeVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(2.0f,2.0f,1.0f))*glm::rotate(angley,vec3(1.0f,0.0f,-1.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,cubeNumIndices,GL_UNSIGNED_SHORT, 0);

	glBindVertexArray(sphereVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(0.0f,0.0f,0.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,sphereNumIndices,GL_UNSIGNED_SHORT, (void*)sphereIndexDataByteOffset);

	glBindVertexArray(sphereVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(2.0f,0.0f,0.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,sphereNumIndices,GL_UNSIGNED_SHORT, (void*)sphereIndexDataByteOffset);

	glBindVertexArray(sphereVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(-2.0f,0.0f,0.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,sphereNumIndices,GL_UNSIGNED_SHORT, (void*)sphereIndexDataByteOffset);

	glBindVertexArray(arrowVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(-2.0f,-2.0f,-1.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,1.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,arrowNumIndices,GL_UNSIGNED_SHORT, (void*)arrowIndexDataByteOffset);

	glBindVertexArray(arrowVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(2.0f,-2.0f,-1.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,1.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,arrowNumIndices,GL_UNSIGNED_SHORT, (void*)arrowIndexDataByteOffset);

	glBindVertexArray(arrowVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(0.0f,-2.0f,-1.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,1.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,arrowNumIndices,GL_UNSIGNED_SHORT, (void*)arrowIndexDataByteOffset);

	/*glBindVertexArray(teapotVertexArrayObjectID);
	transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(1.0f,-1.0f,0.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,0.0f));
	transform=transform*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,teapotNumIndices,GL_UNSIGNED_SHORT, (void*)teapotIndexDataByteOffset);*/
	
}
