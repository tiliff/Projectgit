#include <MyGLWindow.h>
#include <Qt\qdebug.h>

const char* vertexShaderCode =
	"#version 430\r\n"
	""
	"in layout(location=0) vec2 position;"
	"in layout(location=3) vec3 vertexColor;"
	""
	"out vec3 theColor;"
	""
	"void main()"
	"{"
	"gl_Position = vec4(position,0.0,1.0);"
	"theColor=vertexColor;"
	"}";
const char* fragmentShaderCode=
	"#version 430\r\n"
	""
	"out vec4 decolor;"
	"in vec3 theColor;"
	""
	"void main()"
	"{"
	"decolor = vec4(theColor,1.0);"
	"}";

void MyGLWindow::initializeGL()
{
	glewInit();
	sendDataToHardware();
	CompileShaders();
}

void MyGLWindow::paintGL()
{
    glClear(GL_COLOR_BUFFER_BIT);
	glViewport(0,0,width(),height());
	glDrawArrays(GL_TRIANGLES,0,3);
}

void MyGLWindow::sendDataToHardware()
{
	GLfloat verts[] =
	{
		+0.0f, +1.0f,
		+1.0f, +0.0f, +0.0f,
		-1.0f, -1.0f,
		+0.0f, +1.0f, +0.0f,
		+1.0f, -1.0f,
		+0.0f, +0.0f, +1.0f,
	};

	GLuint bufferID;
	glGenBuffers(1,&bufferID);
	glBindBuffer(GL_ARRAY_BUFFER,bufferID);
	glBufferData(GL_ARRAY_BUFFER,sizeof(verts),verts,GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0,2,GL_FLOAT,false,5*sizeof(float),0);
	glEnableVertexAttribArray(3);
	glVertexAttribPointer(3,3,GL_FLOAT,false,5*sizeof(float),(void*)(2*sizeof(float)));
}
void MyGLWindow::CompileShaders()
{
	GLuint vertexShaderID=glCreateShader(GL_VERTEX_SHADER);
	GLuint fragmentShaderID=glCreateShader(GL_FRAGMENT_SHADER);

	const char* adapter[1];
	adapter[0] = vertexShaderCode;
	glShaderSource(vertexShaderID,1,adapter,0);
	adapter[0] = fragmentShaderCode;
	glShaderSource(fragmentShaderID,1,adapter,0);

	glCompileShader(vertexShaderID);
	glCompileShader(fragmentShaderID);

	GLint compileStatus;
	glGetShaderiv(vertexShaderID,GL_COMPILE_STATUS,&compileStatus);

	if(compileStatus != GL_TRUE)
	{
		GLint logLength;
		glGetShaderiv(vertexShaderID,GL_INFO_LOG_LENGTH, &logLength);
		char* buffer = new char [logLength];
		GLsizei bitBucket;
		glGetShaderInfoLog(vertexShaderID,logLength,&bitBucket,buffer);
		qDebug() <<buffer;
		delete [] buffer;
	}

	programID = glCreateProgram();
	glAttachShader(programID,vertexShaderID);
	glAttachShader(programID,fragmentShaderID);
	glLinkProgram(programID);

	glUseProgram(programID);
}
