#include <GL\glew.h>
#include "GlWindow.h"
#include "Qt\qdebug.h"

char* vertexShaderCode =
	"#version 400\r\n"
	""
	"in layout(location=0) vec2 position;"
	"in layout(location=1) vec3 color;"
	""
	"out vec3 decolor;"
	""
	"void main()"
	"{"
	" gl_Position= vec4(position,0,1);"
	" decolor=color;"
	"}";
char* fragmentShaderCode =
	"#version 400\r\n"
	""
	"in vec3 decolor;"
	"out vec3 finalColor;"
	""
	""
	"void main()"
	"{"
	" finalColor = decolor;"
	"}";
void GlWindow::initializeGL()
{
	glewInit();
	sendDataToHardware();
	compileShaders();
	
}

void GlWindow::sendDataToHardware()
{
	GLfloat Vertices[]={
		+0.0f,+1.0f,
		+1.0f,+0.0f,+0.0f,
		-1.0f,-1.0f,
		+0.0f,+1.0f,+0.0f,
		+1.0f,-1.0f,
		+0.0f,+0.0f,+1.0f,
	};

	GLuint bufferID;
	glGenBuffers(1,&bufferID);
	glBindBuffer(GL_ARRAY_BUFFER,bufferID);
	glBufferData(GL_ARRAY_BUFFER,sizeof(Vertices), Vertices, GL_STATIC_DRAW);
    glEnableVertexAttribArray(0);
	glVertexAttribPointer(0,2,GL_FLOAT, GL_FALSE,5*sizeof(float),0);

	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,5*sizeof(float),(void*)(2*sizeof(float)));
}
void GlWindow::compileShaders()
{
	GLuint vertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	GLuint fragShaderID=glCreateShader(GL_FRAGMENT_SHADER);

	const char* adapter[1];
	adapter[0] = vertexShaderCode;
	glShaderSource(vertexShaderID,1,adapter,0);
	adapter[0] = fragmentShaderCode;
	glShaderSource(fragShaderID,1,adapter,0);

	glCompileShader(vertexShaderID);
	glCompileShader(fragShaderID);

	GLint compileStatus;
	glGetShaderiv(vertexShaderID,GL_COMPILE_STATUS,&compileStatus);
	if(compileStatus != GL_TRUE)
	{
		GLint logLength;
		glGetShaderiv(vertexShaderID,GL_INFO_LOG_LENGTH, &logLength);
		char* buffer = new char [logLength];
		GLsizei bitBucket;
		glGetShaderInfoLog(vertexShaderID,logLength,&bitBucket,buffer);
		qDebug() <<buffer;
		delete [] buffer;
	}

	GLuint programID = glCreateProgram();
	glAttachShader(programID,vertexShaderID);
	glAttachShader(programID,fragShaderID);

	glLinkProgram(programID);

	glUseProgram(programID);

}
void GlWindow::paintGL()
{
	glDrawArrays(GL_TRIANGLES,0,3);
}
