#include <gl\glew.h>
#include "GlWindow.h"
#include <Qt\qdebug.h>
#include <glm\glm.hpp>
#include <gtc\matrix_transform.hpp>
#include <gtx\transform.hpp>
const char* vertexShaderCode =
	"#version 430\r\n"
	""
	"in layout(location=0) vec2 position;"
	"in layout(location=1) vec3 vertexColor;"
	""
	"uniform mat4 transform;"
	"out vec3 theColor;"
	""
	"void main()"
	"{"
	"gl_Position = transform * vec4(position,0.0,1.0);"
	"theColor=vertexColor;"
	"}";
const char* fragmentShaderCode=
	"#version 430\r\n"
	""
	"out vec4 decolor;"
	"in vec3 theColor;"
	""
	"void main()"
	"{"
	"decolor = vec4(theColor,1.0);"
	"}";
float anglex=0.0f;
float angley=0.0f;
GLuint programID;
glm::vec3 velocity;
glm::mat4 Transform=glm::mat4();
glm::mat4 Translate=glm::mat4();
void GLWindow::initializeGL()
{
	glewInit();
	glEnable(GL_DEPTH_TEST);
	sendDataToHardware();
	installShaders();
	connect(&timer,SIGNAL(timeout()),this,SLOT(myUpdate()));
	timer.start(0);
}

void GLWindow::sendDataToHardware()
{
	GLfloat verts[] =
	{
		+0.0f, +0.2f,
		+1.0f, +0.0f, +0.0f,
		-0.2f, -0.2f,
		+0.0f, +1.0f, +0.0f,
		+0.2f, -0.2f,
		+0.0f, +0.0f, +1.0f,
	};
	GLuint vertexBufferID;
	glGenBuffers(1,&vertexBufferID);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBufferID);
	glBufferData(GL_ARRAY_BUFFER,sizeof(verts),verts,GL_STATIC_DRAW);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE,sizeof(float)*5,0);
	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE,sizeof(float)*5,(char*)(sizeof(float) * 2));

	GLushort indices[] = {0,1,2};
	GLuint indexBufferID;
	glGenBuffers(1,&indexBufferID);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, indexBufferID);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER,sizeof(indices),indices,GL_STATIC_DRAW);
}
void GLWindow::myUpdate()
{
	float movement = 0;
	glm::vec4 shapeDirection(0, 1.0f, 0,0);
	if(GetAsyncKeyState(VK_UP))
	{
		movement+=0.009f;
	}
	if(GetAsyncKeyState(VK_DOWN))
	{
		movement-=0.009f;
	}
	if(GetAsyncKeyState(VK_LEFT))
	{
		anglex+=.1f;
	}
	if(GetAsyncKeyState(VK_RIGHT))
	{
		anglex-=.1f;
	}
	glm::vec3 direction = glm::vec3(glm::rotate(glm::degrees(anglex), glm::vec3(0,0,1.0f)) * shapeDirection);
	velocity += direction*movement;
	repaint();
}
void GLWindow::installShaders()
{
	GLuint vertexShaderID=glCreateShader(GL_VERTEX_SHADER);
	GLuint fragmentShaderID=glCreateShader(GL_FRAGMENT_SHADER);

	const char* adapter[1];
	adapter[0] = vertexShaderCode;
	glShaderSource(vertexShaderID,1,adapter,0);
	adapter[0] = fragmentShaderCode;
	glShaderSource(fragmentShaderID,1,adapter,0);

	glCompileShader(vertexShaderID);
	glCompileShader(fragmentShaderID);

	GLint compileStatus;
	glGetShaderiv(vertexShaderID,GL_COMPILE_STATUS,&compileStatus);

	if(compileStatus != GL_TRUE)
	{
		GLint logLength;
		glGetShaderiv(vertexShaderID,GL_INFO_LOG_LENGTH, &logLength);
		char* buffer = new char [logLength];
		GLsizei bitBucket;
		glGetShaderInfoLog(vertexShaderID,logLength,&bitBucket,buffer);
		qDebug() <<buffer;
		delete [] buffer;
	}

	programID = glCreateProgram();
	glAttachShader(programID,vertexShaderID);
	glAttachShader(programID,fragmentShaderID);
	glLinkProgram(programID);

	glUseProgram(programID);
}
void GLWindow::paintGL()
{
	glClearColor(0,0,0,1);
	glClear(GL_COLOR_BUFFER_BIT);
	glClear(GL_DEPTH_BUFFER_BIT);
	glViewport(0,0,width(),height());

	Transform = glm::translate(velocity) * glm::rotate(glm::mat4(), glm::degrees(anglex),glm::vec3(0.0f,0.0f,1.0f));

	GLint transformuniformlocation = glGetUniformLocation(programID,"transform");
	glUniformMatrix4fv(transformuniformlocation,1,GL_FALSE,&Transform[0][0]);
	glDrawElements(GL_TRIANGLES,3,GL_UNSIGNED_SHORT,0);
}