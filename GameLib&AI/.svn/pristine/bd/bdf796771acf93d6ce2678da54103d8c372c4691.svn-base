#include <GL\glew.h>
#include <QtGui\qmouseevent>
#include "GlWindow.h"
#include "Qt\qdebug.h"
#include "glm\glm.hpp"
#include <glm\gtc/matrix_transform.hpp>
#include "glm\gtx\transform.hpp"
#include <ShapeGenerator.h>
#include <fstream>
#include <string>
#include "Renderer.h"
#include "Camera.h"
Camera cam;
using glm::vec3;
using glm::vec2;
float angle=0.0f;
float angley=0.0f;



Renderer shapes;
static Renderer::GeometryInfo* geometries[10];
static Renderer::ShaderInfo* shaders[10];
static Renderer::RenderableInfo* renderables[10];
glm::mat4 transformCube1;
void GlWindow::initializeGL()
{
	setMouseTracking(true);
	glewInit();
	shapes.initializeRenderer();
	glEnable(GL_DEPTH_TEST);
	sendDataToHardware();
	connect(&mytimer,SIGNAL(timeout()),this,SLOT(myUpdate()));
	mytimer.start(0);
}
void GlWindow::myUpdate()
{
	QCursor mouse = cursor();
	QPoint mousePosition = mouse.pos();
	cam.mouseUpdate(glm::vec2(mousePosition.x(),mousePosition.y()));
	
		angley +=5.0f;
	
		angle -= 5.0f;
	
	if(GetAsyncKeyState('W'))
	{
		cam.moveForward();
	}
	if(GetAsyncKeyState('S'))
	{
		cam.moveBackward();
	}
	if(GetAsyncKeyState('A'))
	{
		cam.strafeLeft();
	}
	if(GetAsyncKeyState('D'))
	{
		cam.strafeRight();
	}
	if(GetAsyncKeyState('R'))
	{
		cam.moveUp();
	}
	if(GetAsyncKeyState('F'))
	{
		cam.moveDown();
	}

	paintGL();
	swapBuffers();
}
void GlWindow::sendDataToHardware()
{
    Neumont::ShapeData cube= Neumont::ShapeGenerator::makeCube();
	
	geometries[0]=shapes.addGeometry(cube.verts,cube.vertexBufferSize(),cube.indices,cube.numIndices,GL_TRIANGLES);
	shaders[0]=shapes.createShaderInfo("VertexShaderCode.glsl","FragmentShaderCode.glsl");
	shapes.addShaderStreamedParameter(geometries[0],0,Renderer::PT_VEC3,0,12*sizeof(float));
	shapes.addShaderStreamedParameter(geometries[0],1,Renderer::PT_VEC4,3*sizeof(float),12*sizeof(float));
	transformCube1=glm::translate(glm::mat4(),glm::vec3(0.0f,0.0f,0.0f))*glm::rotate(angley,vec3(-1.0f,0.0f,0.0f));
	transformCube1=transformCube1*glm::rotate(angle,vec3(0.0f,1.0f,0.0f));
	renderables[0]=shapes.addRenderable(geometries[0],transformCube1,shaders[0]);

}

void GlWindow::paintGL()
{
	glViewport(0,0,width(),height());
	glClear(GL_DEPTH_BUFFER_BIT);
	glClear(GL_COLOR_BUFFER_BIT);

	glm::mat4 currentshapetransform=transformCube1;
	glm::mat4 worldmat=cam.getWorldToViewMatrix();
	glm::mat4 projection= glm::perspective(90.0f,((float)width()) / height(),0.1f,100.0f);
	glm::mat4 finalmatCube1=currentshapetransform*worldmat;
	vec3 dominatingColor(0.6f,0.6f,0.2f);

	shapes.addRenderableUniformParameter(renderables[0],"dominatingColor",Renderer::PT_VEC4,&dominatingColor[0]);
	shapes.addRenderableUniformParameter(renderables[0],"transform",Renderer::PT_MAT4,&finalmatCube1[0][0]);
	shapes.addRenderableUniformParameter(renderables[0],"projectionMat",Renderer::PT_MAT4,&projection[0][0]);
	glBindVertexArray(geometries[0]->vertexArrayID);
	glDrawElements(geometries[0]->indexingMode,geometries[0]->numIndices,GL_UNSIGNED_SHORT,(void*)geometries[0]->geometryoffset);
	
}
