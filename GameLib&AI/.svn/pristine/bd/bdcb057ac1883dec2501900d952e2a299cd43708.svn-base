#include <testing.h>
#include <iostream>
#include <Engine\Tools\BinaryToShapeLoader.h>

void Testing::init() {
	myCam.setPos(glm::vec3(-1.40f, 0.82f, -0.45f),glm::vec3(0.41f, -0.29f, -0.01f));
	finalcolor=glm::vec4(1.0f,1.0f,1.0f,alpha);
	finalcolor3=glm::vec4(1.0f,1.0f,1.0f,1.0f);
	finalcolor4=glm::vec4(1.0f,1.0f,1.0f,1.0f);
	finalcolor5=glm::vec4(1.0f,1.0f,1.0f,1.0f);
	finalcolor2=glm::vec4(1.0f,1.0f,1.0f,alpha2);

	
	menu->edit("Is Visible", binaryAlphaVis, "Binary Alpha");
	menu->edit("Alpha Blending Visible", blendtab , "Alpha Blending");
	menu->edit("Flat Plane Normal Map", PlaneNormalTab , "Flat Plane Normal");
	menu->toggleBool("Blending Enabled", isblending,"Alpha Blending");
	menu->slideFloat("Alpha",alpha,0,1,true,"Alpha Blending");
	menu->slideFloat("Shape Two Alpha",alpha2,0,1,true,"Alpha Blending");

	
	//place shaders to folder "shaders" in solution directory
	auto meShader = addShader("./../shaders/vert.glsl","./../shaders/frag.glsl");
	saveViewTransform(meShader,"viewTransform");


	
	

	// initUVData because sphere's don't have it
	auto tempGeo = addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makePlane(3)),GL_TRIANGLES);
	auto tempGeo2= addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makeSphere(10)),GL_TRIANGLES);
	auto tempGeo4= addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makeSphere(10)),GL_TRIANGLES);
	auto tempGeo3= addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makeCube()),GL_TRIANGLES);
	auto tempGeo5= addGeometry((BinaryToShapeLoader::loadFromFile("./Plane.bin")), GL_TRIANGLES);

	// format for textures with folder in solution directory
	myTexture = addTexture("./../Pics/typhlosion.png");
	myTexture2 = addTexture("./../Pics/fire.png");
	myTexture3= addTexture("./../Pics/patter2.png");
	myTexture4= addTexture("./../Pics/Pattern1.png");
	myTexture5= addTexture("./../Pics/Shapes.png");



	// when using a NU shape there is no need to define layouts
	meRenderable = addRenderable(tempGeo,meShader,myTexture);
	meRenderable2 = addRenderable(tempGeo2,meShader,myTexture2);
	meRenderable4 = addRenderable(tempGeo4,meShader,myTexture4);
	meRenderable3 = addRenderable(tempGeo3,meShader,myTexture3);
	meRenderable5 = addRenderable(tempGeo5,meShader,myTexture5);

	//auto tempGeo2 = addGeometry(NUShapeEditor::initUVData(Neumont::ShapeGenerator::makeSphere(10)),GL_TRIANGLES);
	//myTexture = addTexture("./../fire.png");
	//meRenderable = addRenderable(tempGeo2,meShader,myTexture);
	
	meRenderable->saveWhereMat("model2WorldTransform"); // really  just a call to addUniformPram
	meRenderable->saveTexture("myTexture");
	meRenderable2->saveWhereMat("model2WorldTransform");
	meRenderable2->saveTexture("myTexture");
	meRenderable3->saveWhereMat("model2WorldTransform");
	meRenderable3->saveTexture("myTexture");
	meRenderable4->saveWhereMat("model2WorldTransform");
	meRenderable4->saveTexture("myTexture");
	meRenderable5->saveWhereMat("model2WorldTransform");
	meRenderable5->saveTexture("myTexture");
	meRenderable->addUniformParameter("FinalColor",ParameterType::PT_VEC4,&finalcolor3[0]);
	meRenderable2->addUniformParameter("FinalColor",ParameterType::PT_VEC4,&finalcolor4[0]);
	meRenderable3->addUniformParameter("FinalColor",ParameterType::PT_VEC4,&finalcolor[0]);
	meRenderable4->addUniformParameter("FinalColor",ParameterType::PT_VEC4,&finalcolor2[0]);
	meRenderable5->addUniformParameter("FinalColor",ParameterType::PT_VEC4,&finalcolor5[0]);




	//rotationSpeed = Random::glmRand::randomFloatVectorInBoxRanged(0.0f,145.0f,180.0f);
	
	//rotation += rotationSpeed;

	
	
}
void Testing::nextFrame(float dt) {
	//bad hack to update color and rotation every 2 seconds
	/*static float currentTime = 0;
	currentTime += dt;
	if(currentTime > 2) {
		currentTime = 0;
		blendColor = Random::glmRand::randomFloatVectorInBox(1,1,1);
		const int rotSpeedRange = 100;
		rotationSpeed = Random::glmRand::randomFloatVectorInBoxRanged(rotSpeedRange,rotSpeedRange,rotSpeedRange);
	}*/
	static float currentTime = 0;
	currentTime += dt;
	if(currentTime > 2)
	{
	currentTime=0;
	const int rotSpeedRange = 10;
	rotationSpeed = Random::glmRand::randomFloatVectorInBoxRanged(rotSpeedRange,rotSpeedRange,rotSpeedRange);
	rotationSpeed2 = Random::glmRand::randomFloatVectorInBoxRanged(rotSpeedRange,rotSpeedRange,rotSpeedRange);
	}
	rotation2 += rotationSpeed * dt;
	rotation3 += rotationSpeed2 * dt;
	//just edit the where matrix for renderables

	meRenderable->visible = binaryAlphaVis;
	meRenderable2->visible= binaryAlphaVis;
	meRenderable3->visible= blendtab;
	meRenderable4->visible= blendtab;
	meRenderable5->visible= PlaneNormalTab;

	if(isblending)
	{
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	}
	finalcolor.a=alpha;
	finalcolor2.a=alpha2;
	meRenderable->whereMat = glm::rotate(rotation.x,glm::vec3(1,0,0))
		*= glm::rotate(rotation.y,glm::vec3(0,1,0))
		*= glm::rotate(rotation.z,glm::vec3(0,0,1));
	meRenderable2->whereMat = glm::rotate(rotation2.x,glm::vec3(1,0,0))
		*= glm::rotate(rotation2.y,glm::vec3(0,1,0))
		*= glm::rotate(rotation2.z,glm::vec3(0,0,1));
	meRenderable3->whereMat = glm::rotate(rotation2.x,glm::vec3(1,0,0))
		*= glm::rotate(rotation2.y,glm::vec3(0,1,0))
		*= glm::rotate(rotation2.z,glm::vec3(0,0,1));
	meRenderable4->whereMat = glm::rotate(rotation3.x,glm::vec3(1,0,0))
		*= glm::rotate(rotation3.y,glm::vec3(0,1,0))
		*= glm::rotate(rotation3.z,glm::vec3(0,0,1));
	meRenderable5->whereMat = glm::mat4(1);
}