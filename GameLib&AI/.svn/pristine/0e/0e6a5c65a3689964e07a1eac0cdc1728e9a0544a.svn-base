#include <MyGLWindow.h>
#include <Qt\qdebug.h>
#include <glm\glm.hpp>
#include <gtx\transform.hpp>
#include <gtc\matrix_transform.hpp>
#include <fstream>
#include <ShapeGenerator.h>
#include <Camera.h>

int cubeIndices;
int torusindices;

GLuint cubeVertexArrayObjectID;
GLuint torusVertexArrayObjectID;
Neumont::ShapeData torus;
Neumont::ShapeData cube;
Camera cam;

float angle=0.0f;
float angley=0.0f;
void MyGLWindow::initializeGL()
{
	glewInit();
	glEnable(GL_DEPTH_TEST);
	sendDataToHardware();
	CompileShaders();
	connect(&mytimer,SIGNAL(timeout()),this,SLOT(myUpdate()));
	mytimer.start(0);
}
void MyGLWindow::paintGL()
{
glViewport(0,0,width(),height());
	glClear(GL_DEPTH_BUFFER_BIT);
	glClear(GL_COLOR_BUFFER_BIT);

	glm::mat4 transform=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(2.0f,1.0f,-3.0f))*glm::rotate(angley,glm::vec3(1.0f,0.0f,0.0f));
	transform=transform*glm::rotate(angle,glm::vec3(0.0f,0.0f,-1.0f));
	glm::mat4 projectionmatrix = glm::perspective(90.0f,((float)width()) / height(),0.1f,100.0f);
	glm::vec3 dominatingColor(0.2f,0.6f,0.6f);
	GLint dominatingColorUniformLocation = glGetUniformLocation(programID,"dominatingColor");
	GLint translateUniformLocation = glGetUniformLocation(programID,"transform");
	GLint projectionUniformLocation = glGetUniformLocation(programID,"projectionMat");

	//glUniform3fv(dominatingColorUniformLocation,1,&dominatingColor[0]);s
	glBindVertexArray(cubeVertexArrayObjectID);
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,cubeIndices,GL_UNSIGNED_SHORT ,(void*)cubeOffset);
	

	glm::mat4 transform2=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(-2.0f,1.0f,-3.0f))*glm::rotate(angley,glm::vec3(1.0f,0.0f,0.0f))*glm::rotate(angle,glm::vec3(0.0f,0.0f,-1.0f));
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform2[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,cubeIndices,GL_UNSIGNED_SHORT ,(void*)cubeOffset);

	glBindVertexArray(torusVertexArrayObjectID);
	glm::mat4 transform3=cam.getWorldToViewMatrix()*glm::translate(glm::mat4(),glm::vec3(0.0f,-2.0f,-3.0f))*glm::rotate(angley,glm::vec3(1.0f,0.0f,0.0f))*glm::rotate(angle,glm::vec3(0.0f,0.0f,-1.0f));
	glUniformMatrix4fv(translateUniformLocation, 1, false, &transform3[0][0]);
	glUniformMatrix4fv(projectionUniformLocation, 1, false, &projectionmatrix[0][0]);
	glDrawElements(GL_TRIANGLES,torusindices,GL_UNSIGNED_SHORT ,(void*)torusOffset);
}
void MyGLWindow::sendDataToHardware()
{

	cube= Neumont::ShapeGenerator::makeCube();
	torus= Neumont::ShapeGenerator::makeTorus(10);
	glGenBuffers(1,&bufferID);
	glBindBuffer(GL_ARRAY_BUFFER,bufferID);
	glBufferData(GL_ARRAY_BUFFER,cube.vertexBufferSize()+cube.indexBufferSize()+torus.vertexBufferSize()+torus.indexBufferSize(), 0, GL_STATIC_DRAW);
	GLsizei currentOffset = 0;
	glBufferSubData(GL_ARRAY_BUFFER,currentOffset,cube.vertexBufferSize(),cube.verts);
	currentOffset+= cube.vertexBufferSize();
	glBufferSubData(GL_ARRAY_BUFFER,currentOffset,cube.indexBufferSize(),cube.indices);
	currentOffset+=cube.indexBufferSize();
	glBufferSubData(GL_ARRAY_BUFFER,currentOffset,torus.vertexBufferSize(),torus.verts);
	currentOffset+= torus.vertexBufferSize();
	glBufferSubData(GL_ARRAY_BUFFER,currentOffset,torus.indexBufferSize(),torus.indices);

	

	
	cubeIndices=cube.numIndices;
	torusindices=torus.numIndices;

	glGenVertexArrays(1,&cubeVertexArrayObjectID);
	glGenVertexArrays(1,&torusVertexArrayObjectID);

	glBindVertexArray(cubeVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,bufferID);
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),0);
	glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(3*sizeof(float)));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,bufferID);

	glBindVertexArray(torusVertexArrayObjectID);
	glEnableVertexAttribArray(0);
	glEnableVertexAttribArray(1);
	glBindBuffer(GL_ARRAY_BUFFER,bufferID);
	GLuint torusByteOffset = cube.vertexBufferSize()+cube.indexBufferSize();
	glVertexAttribPointer(0,3,GL_FLOAT, GL_FALSE,12*sizeof(float),(void*)(torusByteOffset));
	glVertexAttribPointer(1,3,GL_FLOAT,GL_FALSE,12*sizeof(float),(void*)(torusByteOffset+(3*sizeof(float))));
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER,bufferID);

	torusOffset=torus.vertexBufferSize()+torusByteOffset;
	cubeOffset=cube.vertexBufferSize();
}
std::string readShaderCode(const char *fileName)
{
	std::ifstream input(fileName);

	if(!input.good())
	{
		qDebug() << "File not found" << fileName;
		exit(1);
	}
	return std::string(std::istreambuf_iterator<char>(input),
		std::istreambuf_iterator<char>());
}
void MyGLWindow::CompileShaders()
{
	GLuint vertexShaderID = glCreateShader(GL_VERTEX_SHADER);
	GLuint fragShaderID=glCreateShader(GL_FRAGMENT_SHADER);
	const char* adapter[1];
	
	std::string shaderCode= readShaderCode("../shaders/vertexShaderCode.glsl");
	adapter[0] = shaderCode.c_str();
	glShaderSource(vertexShaderID,1,adapter,0);

	shaderCode= readShaderCode("../shaders/fragmentShaderCode.glsl");
	adapter[0] = shaderCode.c_str();
	glShaderSource(fragShaderID,1,adapter,0);

	glCompileShader(vertexShaderID);
	glCompileShader(fragShaderID);

	GLint compileStatus;
	glGetShaderiv(vertexShaderID,GL_COMPILE_STATUS,&compileStatus);
	if(compileStatus != GL_TRUE)
	{
		GLint logLength;
		glGetShaderiv(vertexShaderID,GL_INFO_LOG_LENGTH, &logLength);
		char* buffer = new char [logLength];
		GLsizei bitBucket;
		glGetShaderInfoLog(vertexShaderID,logLength,&bitBucket,buffer);
		qDebug() <<buffer;
		delete [] buffer;
	}

	programID = glCreateProgram();
	glAttachShader(programID,vertexShaderID);
	glAttachShader(programID,fragShaderID);

	glLinkProgram(programID);

	glUseProgram(programID);

	glDeleteShader(vertexShaderID);
	glDeleteShader(fragShaderID);
}
void MyGLWindow::myUpdate()
{
	if(GetAsyncKeyState('E'))
	{
	QCursor mouse = cursor();
	QPoint mousePosition = mouse.pos();
	cam.mouseUpdate(glm::vec2(mousePosition.x(),mousePosition.y()));
	}

	if(GetAsyncKeyState('W'))
	{
		cam.moveForward();
	}
	if(GetAsyncKeyState('S'))
	{
		cam.moveBackward();
	}
	if(GetAsyncKeyState('A'))
	{
		cam.strafeLeft();
	}
	if(GetAsyncKeyState('D'))
	{
		cam.strafeRight();
	}
	if(GetAsyncKeyState('R'))
	{
		cam.moveUp();
	}
	if(GetAsyncKeyState('F'))
	{
		cam.moveDown();
	}
	
		angle += 2.0f;

		angley -= 2.0f;
	
	paintGL();
	swapBuffers();
}
